#include <SFML/Graphics.hpp>
#include <iostream>
#include <vector>
#include <cstdio>

using namespace std;
//Classes
class Linha {
public:
	sf::RectangleShape shape;
	int posicaoX;
	int posicaoY;
	char direction;

	sf::Vector2f tam;

	Linha(char rDirection) {
		shape.setFillColor(sf::Color::Blue);
		direction = rDirection;
		if (direction == 'h') {
			tam = { 107, 12 };
		} else if (direction == 'v') {
			tam = { 12, 107 };
		} else {
			cout << "Error!!!" << endl;
			exit(1);
		}
		shape.setSize(tam);
		posicaoX = 0;
		posicaoY = 0;
	}

	void setaPosicao(int x, int y) {
		posicaoX = x;
		posicaoY = y;
		shape.setPosition(x, y);
	}

};

class Bola {
public:
	sf::CircleShape shape;
	int posicaoX;
	int posicaoY;

	int radius;
	int tam;

	Bola() {
		shape.setFillColor(sf::Color::White);
		tam = 10;
		radius = tam * 2;
		shape.setRadius(tam);
		posicaoX = 0;
		posicaoY = 0;
	}

	void setaPosicao(int x, int y) {
		posicaoX = x;
		posicaoY = y;
		shape.setPosition(x, y);
	}

};

//Funções
bool isMult(int num, int mult) {
	if (num % mult == 0) {
		return 1;
	} else {
		return 0;
	}
}

//função jogo

class Janela {
public:
	sf::RenderWindow janela;
	int largura;
	int altura;
	int limiteQuadros;

	vector<Bola> bolas;
	vector<Linha> linhasHorizontais;
	vector<Linha> linhasVerticais;

	Janela(int rLargura, int rAltura) :
			janela(sf::VideoMode(rLargura, rAltura), "Pontos e Caixas") {
		largura = rLargura;
		altura = rAltura;
		limiteQuadros = 60;
		janela.setFramerateLimit(limiteQuadros);
	}

	void carregar() {
		bolas = vector<Bola>(36);
		linhasHorizontais = vector<Linha>(30, Linha('h'));
		linhasVerticais = vector<Linha>(30, Linha('v'));

		setaPosicaoVectorBola();
		setaPosicaoVectorLinhaHorizontal();
		setaPosicaoVectorVertical();
	}
	void eventos() {
		sf::Event event;
		while (janela.pollEvent(event)) {
			if (event.type == sf::Event::Closed)
				janela.close();
		}
	}

	void desenhar() {
		janela.clear(sf::Color::Black); // fundo preto
		for (int i = 0; i < linhasHorizontais.size(); i++) {
			janela.draw(linhasHorizontais[i].shape);
		}
		for (int i = 0; i < linhasVerticais.size(); i++) {
			janela.draw(linhasVerticais[i].shape);
		}
		for (int i = 0; i < bolas.size(); i++) {
			janela.draw(bolas[i].shape);
		}
		janela.display();
	}

	void gameLoop() {
		carregar();
		while (janela.isOpen()) { //evenmtos
			eventos();
			desenhar();
		}
	}

	void setaPosicaoVectorBola() {
		int cont = 0;
		int xOrigem = 194;
		int yOrigem = 104;
		cout << "Abriu a função" << endl;
		int espaco = 107;
		int xBola = xOrigem;
		int yBola = yOrigem;
		for (int i = 0; i < bolas.size(); i++) {
			if (i != 0) {
				if (isMult(i, 6)) {
					xBola = xOrigem;
					yBola = yOrigem;
					cont++;
					yBola += espaco * cont;
				} else {
					xBola += espaco;
				}
				//(*bola).setaPosicao();
				bolas[i].setaPosicao(xBola, yBola);
			} else {
				bolas[i].setaPosicao(xOrigem, yOrigem);
			}
		}
	}
	void setaPosicaoVectorLinhaHorizontal() {
		int cont = 0;
		int xOrigem = 194 + 5;
		int yOrigem = 104 + 5;
		cout << "Abriu a função" << endl;
		int espacoX = 107 + 30;
		int espacoY = 107;
		int xLinha = xOrigem;
		int yLinha = yOrigem;
		int mult=5;
		for (int i = 0; i < linhasHorizontais.size(); i++) {
			if (i != 0) {
				if (isMult(i, mult)) {
					xLinha = xOrigem;
					yLinha = yOrigem;
					cont++;
					yLinha += espacoY * cont;
				} else {
					xLinha += espacoY;
				}
				//(*bola).setaPosicao();
				linhasHorizontais[i].setaPosicao(xLinha, yLinha);
			} else {
				linhasHorizontais[i].setaPosicao(xOrigem, yOrigem);
			}
		}
	}

	void setaPosicaoVectorVertical() {
		int cont = 0;
		int xOrigem = 194 + 5;
		int yOrigem = 104 + 5;
		cout << "Abriu a função" << endl;
		int espacoX = 107 + 30;
		int espacoY = 107;
		int xLinha = xOrigem;
		int yLinha = yOrigem;
		int mult=6;
		for (int i = 0; i < linhasVerticais.size(); i++) {
			if (i != 0) {
				if (isMult(i, mult)) {
					xLinha = xOrigem;
					yLinha = yOrigem;
					cont++;
					yLinha += espacoY * cont;
				} else {
					xLinha += espacoY;
				}
				//(*bola).setaPosicao();
				linhasVerticais[i].setaPosicao(xLinha, yLinha);
			} else {
				linhasVerticais[i].setaPosicao(xOrigem, yOrigem);
			}
		}
	}
};
int main() {
	setbuf(stdout, NULL);
	Janela game(950, 720);
	std::cout << "Abriu" << std::endl;

	game.gameLoop();
	return 0;
}
