#include <SFML/Graphics.hpp>
#include <iostream>
#include <vector>
#include <cstdio>
#include <ctime>

using namespace std;

//Classes

class Quadrado{ //Classes dos quadrados formados entre linhas e pontos
public:
	sf::RectangleShape shape;
		int posicaoX; //coordanadas do quadrado
		int posicaoY;

		bool fechado; //Verdadeiro quando as linhas em volta são selecionadas
		sf::Vector2f tam; // vetor com as medidas do quadrado

		Quadrado() { //inicializa as variáveis da classe
			posicaoX=0;
			posicaoY=0;
			fechado=0;

			tam = {95, 95};
			shape.setSize(tam);
			setaCor(100, 250, 100, 0);
		}

		void setaPosicao(int x, int y) { //seta nova posição
			posicaoX = x;
			posicaoY = y;
			shape.setPosition(x, y);
		}

		void setaCor(int r, int g, int b, int a) { //seta nova cor
			shape.setFillColor(sf::Color(r, g, b, a));
		}

		void fechar(){ //marca quadrado como fechado
			fechado=1;
		}
};

class Linha { //Classe das linhas clicaveis do jogo
public:
	sf::RectangleShape shape;
	int posicaoX; //coordanadas do quadrado
	int posicaoY;

	char direcao; //direção da linha

	bool ativo; //Verdadeiro se o mouse está em cima da linha
	bool escolhido; //Verdadeiro se a linha foi clicada

	sf::Vector2f tam;  // vetor com as medidas do quadrado

	Linha(char rDirecao) { //inicializa as variáveis da classe
		shape.setFillColor(sf::Color(0, 0, 255, 50));
		direcao = rDirecao;
		if (direcao == 'h') {
			tam = { 87, 12 };
		} else if (direcao == 'v') {
			tam = { 12, 87 };
		} else {
			cout << "Error!!!" << endl;
			exit(1);
		}
		shape.setSize(tam);
		posicaoX = 0;
		posicaoY = 0;
		ativo = 0;
		escolhido = 0;
	}

	Linha(int altura, int largura, int x, int y){ //Inicializa uso da classe para fins estéticos
		shape.setFillColor(sf::Color(0, 0, 0, 255));
		tam={altura, largura};
		shape.setSize(tam);
		posicaoX = x;
		posicaoY = y;
		direcao='0';
		ativo=0;
		escolhido=0;
	}

	void setaPosicao(int x, int y) { //seta nova posição
		posicaoX = x;
		posicaoY = y;
		shape.setPosition(x, y);
	}

	void setaCor(int r, int g, int b, int a) { //seta nova cor
		shape.setFillColor(sf::Color(r, g, b, a));
	}

	bool emCima(sf::RenderWindow& janela){ //verifica se mouse está em cima da linha
		sf::Vector2i posicao = sf::Mouse::getPosition(janela);
		int x = posicao.x; //posições x y do mouse
		int y = posicao.y;

		bool emCima = (x > posicaoX) && (x < posicaoX+tam.x) && (y > posicaoY) && (y < posicaoY+tam.y);
		return  emCima;
	}

	void passarLinha(sf::RenderWindow &janela) { //ativa a linha (muda a cor) quando o mouse está em cima
		if (!escolhido) {
			if (emCima(janela)) {
				setaCor(0, 0, 255, 255);
				ativo = 1;
			} else if (ativo && !emCima(janela)) {
				setaCor(0, 0, 255, 50);
				ativo = 0;
			}
		}
	}

	bool clicarLinha(sf::RenderWindow& janela){ //ve se a linha foi clicada, e caso sim a ativa quando a linha é clicada
		if(!escolhido){
			if(emCima(janela)){
				if(sf::Mouse::isButtonPressed(sf::Mouse::Left)){
					setaCor(0, 0, 255, 250);
					escolhido=1;
					return escolhido;
				}
			}
		}
		return 0;
	}

	bool clicarLinhaBot() { //clique de linha feito pelo bot
		if(!escolhido){
			setaCor(255, 0, 0, 255);
			escolhido = 1;
			return 1;
		}
		return 0;
	}

	int pegaX() { //retorno posição x
		return posicaoX;
	}

	int pegaY() { //retorno posição y
		return posicaoY;
	}

};

class Bola { //classe das bolas que aparecem na tela
public:
	sf::CircleShape shape;
	int posicaoX; //posições x e y da bola
	int posicaoY;

	int radius; //raio e tamanho do círculo
	int tam;

	Bola() { //inicializa as variáveis da classee
		shape.setFillColor(sf::Color::White);
		radius = 10;
		tam = radius * 2;
		shape.setRadius(radius);
		posicaoX = 0;
		posicaoY = 0;
	}

	void setaPosicao(int x, int y) { //seta nova posição da bola
		posicaoX = x;
		posicaoY = y;
		shape.setPosition(x, y);
	}

	int pegaX() { //retorno posição x
		return posicaoX;
	}

	int pegaY() { //retorno posição y
		return posicaoY;
	}

};

class Botao{ //Classes dos botões em geral
public:
	sf::RectangleShape shape;

	int posicaoX;
	int posicaoY;

	sf::Vector2f tam;

	Botao(int x, int y) {
		setaCor(255, 255, 0, 200);
		posicaoX=x;
		posicaoY=y;
		setaPosicao(posicaoX, posicaoY);
		tam = {243, 93};
		shape.setSize(tam);
	}


	void setaPosicao(int x, int y) { //seta nova posição
		posicaoX = x;
		posicaoY = y;
		shape.setPosition(x, y);
	}

	void setaTamanho(float largura, float altura){
		tam={largura, altura};
		shape.setSize(tam);
	}

	void setaCor(int r, int g, int b, int a) { //seta nova cor
		shape.setFillColor(sf::Color(r, g, b, a));
	}

	bool emCima(sf::RenderWindow& janela){ //verifica se mouse está em cima da linha
		sf::Vector2i posicao = sf::Mouse::getPosition(janela);
		int x = posicao.x; //posições x y do mouse
		int y = posicao.y;

		bool emCima = (x > posicaoX) && (x < posicaoX+tam.x) && (y > posicaoY) && (y < posicaoY+tam.y);
		return  emCima;
	}

	bool clicarBotao(sf::RenderWindow& janela) { //ativa evento quando clicada
		if(emCima(janela)){
			if(sf::Mouse::isButtonPressed(sf::Mouse::Left)){
				return 1;
			}
		}
		return 0;
	}


	int pegaX() { //retorno posição x
		return posicaoX;
	}

	int pegaY() { //retorno posição y
		return posicaoY;
	}
};

class Jogador{ //classe dos jogadores da partida
public:
	string nome; //nome do jogador

	int pontos; //quantidade de pontos

	Jogador(string rNome) { //inicializa as variáveis da classee
		nome = rNome;
		pontos = 0;
	}

	void restart(){
		pontos=0;
	}

	void adicionaPonto(){ //adiciona um ponto ao jogador
		pontos++;
		imprimePonto();
	}

	void imprimePonto(){ //mostra os pontos do jogador
		cout << nome << ": " << pontos << endl;
	}

};

//FunÃ§Ãµes
bool eMultiplo(int num, int mult) { //verifica se um numero é multiplo do outro
	if (num % mult == 0) {
		return 1;
	} else {
		return 0;
	}
}

/*********************************funÃ§Ã£o jogo*********************************/

class Janela { //janela do jogo
public:
	sf::RenderWindow janela;
	int largura; //tamanho da janela
	int altura;

	int limiteQuadros; //limite de fps do jogo

	Jogador jogador; //jogadores do jogo
	Jogador bot;

	bool estaNoMenu;
	bool acabou;

	sf::RectangleShape mensagemFim;
	Botao botaoReiniciar;
	Botao botaoVoltarMenu;

	vector<Quadrado> quadrados; //vetores dos elementos visuais
	vector<Linha> linhasHorizontais;
	vector<Linha> linhasVerticais;
	vector<Bola> bolas;

	Janela(int rLargura, int rAltura) : janela(sf::VideoMode(rLargura, rAltura), "Pontos e Caixas"), jogador("Player"), bot("Bot"), botaoReiniciar(300, 200), botaoVoltarMenu(0, 600){ //inicializa as variáveis da classe e objetos da classe
		largura = rLargura;
		altura = rAltura;
		limiteQuadros = 100;
		estaNoMenu=0;
		acabou=0;
		janela.setFramerateLimit(limiteQuadros);
	}

	void menu() {
	    estaNoMenu = 1;
	    sf::RectangleShape nomeJogo;
	    Botao botaoIniciar(499, 345);
	    Botao botaoFechar(499, 485);

	    // agr vai
	    sf::Texture texturaFundo;
	    if (!texturaFundo.loadFromFile("imagens/Fundo1.png")) {
	        std::cerr << "Erro ao carregar imagem de fundo\n";
	        return;
	    }
	    sf::Sprite spriteFundo;
	    spriteFundo.setTexture(texturaFundo);

	    sf::Vector2u tamanhoImagem = texturaFundo.getSize();
	       float escalaX = 947.0f / tamanhoImagem.x;
	       float escalaY = 720.0f / tamanhoImagem.y;
	       spriteFundo.setScale(escalaX, escalaY);


	    while (janela.isOpen()) {
	        sf::Event evento;
	        while (janela.pollEvent(evento)) {
	            if (evento.type == sf::Event::Closed)
	                janela.close();
	        }

	        if (botaoIniciar.clicarBotao(janela)) {
	            gameLoop();
	        }

	        janela.clear();

	        janela.draw(spriteFundo);             // Fundo com imagem
	        janela.draw(botaoIniciar.shape);      // Botão
	        janela.draw(botaoFechar.shape);
	        janela.display();
	    }
	}


	void gameLoop() { //loop onde aocntece as etapas do jogo
		estaNoMenu=0;
		carregar(); //carrega os elementos visuais
		while (janela.isOpen()) {
			eventos(); //eventos do jogo
			desenhar (); //desenha os elementos visuais
		}
	}

	void carregar() { //carrega os elementos visuais
		quadrados = vector<Quadrado>(25);
		linhasHorizontais = vector<Linha>(30, Linha('h'));
		linhasVerticais = vector<Linha>(30, Linha('v'));
		bolas = vector<Bola>(36);

		jogador.restart();
		bot.restart();
		acabou=0;

		setaPosicaoVectorQuadrado(); //coloca os elementos do vetor em suas posições
		setaPosicaoVectorLinhaHorizontal();
		setaPosicaoVectorVertical();
		setaPosicaoVectorBola();
	}

	void eventos() { //verifica possíveis ações do jogo
		sf::Event event;
		bool fechou=0;
		while (janela.pollEvent(event)) {
			if (event.type == sf::Event::Closed)
				janela.close();
			for(int i=0; i<linhasHorizontais.size(); i++){
				linhasHorizontais[i].passarLinha(janela); //primeiro para linhas horizontais
				if(linhasHorizontais[i].clicarLinha(janela)){
					fechou = fecharQuadrado('p');
					fim();
					if(!fechou && !acabou){
						do{
							sf::sleep(sf::seconds(1));
							jogoBot();
							fechou = fecharQuadrado('b');
							fim();
						} while(fechou && !acabou);
					}
				}
				linhasVerticais[i].passarLinha(janela); //depois para verticais
				if(linhasVerticais[i].clicarLinha(janela)){
					fechou = fecharQuadrado('p');
					fim();
					if(!fechou && !acabou){
						do{
							sf::sleep(sf::seconds(0.5));
							jogoBot();
							fechou = fecharQuadrado('b');
							fim();
						} while(fechou && !acabou);
					}
				}
			}
			if(botaoVoltarMenu.clicarBotao(janela)){
				menu();
			}
			if(acabou){
				if(botaoReiniciar.clicarBotao(janela)){
					carregar();
				}
			}
		}
	}

	void desenhar() { //desenha os elementos na tela
		janela.clear(sf::Color::Black); // fundo preto
		if(!estaNoMenu){
			for (int i = 0; i < quadrados.size(); i++) {
				janela.draw(quadrados[i].shape);
			}
			for (int i = 0; i < linhasHorizontais.size(); i++) { //linhas e bolas
				janela.draw(linhasHorizontais[i].shape);
			}
			for (int i = 0; i < linhasVerticais.size(); i++) {
				janela.draw(linhasVerticais[i].shape);
			}
			for (int i = 0; i < bolas.size(); i++) {
				janela.draw(bolas[i].shape);
			 }
			janela.draw(botaoVoltarMenu.shape);
		}

		if(acabou){
			sf::Vector2f  tamanhoMensagem(500, 300);
			mensagemFim.setSize(tamanhoMensagem);
			mensagemFim.setPosition(400, 0);
			mensagemFim.setFillColor(sf::Color::Black);
			janela.draw(mensagemFim);
			janela.draw(botaoReiniciar.shape);
		}
		janela.display();
	}

	void setaPosicaoVectorQuadrado() {
		int linhasPassadas = 0;
		int xOrigem = 210;
		int yOrigem = 120;
		int espaco = 107;
		int xQuadrado = xOrigem;
		int yQuadrado = yOrigem;
		int quadradosPorLinha=5;
		for (int i = 0; i < quadrados.size(); i++) {
			if (i != 0) {
				if (eMultiplo(i, quadradosPorLinha)) {
					xQuadrado = xOrigem;
					yQuadrado = yOrigem;
					linhasPassadas++;
					yQuadrado += espaco * linhasPassadas;
				} else {
					xQuadrado += espaco;
				}
				quadrados[i].setaPosicao(xQuadrado, yQuadrado);
			} else {
				quadrados[i].setaPosicao(xOrigem, yOrigem);
			}
		}
	}

void setaPosicaoVectorLinhaHorizontal() {
		int linhasPassadas = 0;
		int xOrigem = 194 + bolas[0].tam;
		int yOrigem = 108;
		int espaco = 107;
		int xLinha = xOrigem;
		int yLinha = yOrigem;
		int linhasHorizontaisPorLinha = 5;
		for (int i = 0; i < linhasHorizontais.size(); i++) {
			if (i != 0) {
				if (eMultiplo(i, linhasHorizontaisPorLinha)) {
					xLinha = xOrigem;
					yLinha = yOrigem;
					linhasPassadas++;
					yLinha += espaco * linhasPassadas;
				} else {
					xLinha += espaco;
				}
				//(*bola).setaPosicao();
				linhasHorizontais[i].setaPosicao(xLinha, yLinha);
			} else {
				linhasHorizontais[i].setaPosicao(xOrigem, yOrigem);
			}
		}
	}

void setaPosicaoVectorVertical() {
		int linhasPassadas = 0;
		int xOrigem = 194 + 4;
		int yOrigem = 104 + bolas[0].tam;
		int espaco = 107;
		int xLinha = xOrigem;
		int yLinha = yOrigem;
		int linhasverticaisPorLinha = 6;
		for (int i = 0; i < linhasVerticais.size(); i++) {
			if (i != 0) {
				if (eMultiplo(i, linhasverticaisPorLinha)) {
					xLinha = xOrigem;
					yLinha = yOrigem;
					linhasPassadas++;
					yLinha += espaco * linhasPassadas;
				} else {
					xLinha += espaco;
				}
				linhasVerticais[i].setaPosicao(xLinha, yLinha);
			} else {
				linhasVerticais[i].setaPosicao(xOrigem, yOrigem);
			}
		}
	}

void setaPosicaoVectorBola() {
		int linhasPassadas = 0;
		int xOrigem = 194;
		int yOrigem = 104;
		int espaco = 107;
		int xBola = xOrigem;
		int yBola = yOrigem;
		int bolasPorLinha =6;
		for (int i = 0; i < bolas.size(); i++) {
			if (i != 0) {
				if (eMultiplo(i, bolasPorLinha)) {
					xBola = xOrigem;
					yBola = yOrigem;
					linhasPassadas++;
					yBola += espaco * linhasPassadas;
				} else {
					xBola += espaco;
				}
				bolas[i].setaPosicao(xBola, yBola);
			} else {
				bolas[i].setaPosicao(xOrigem, yOrigem);
			}
		}
	}

	void jogoBot() { //jogada aleatória do robo
		std::srand(std::time(NULL)); //define a semente como aleatória

		bool escolheu; //Verdadeiro caso o bot tenha conseguido escolher a linha

		do {
			int linhaEscolhida = rand() % (linhasHorizontais.size() + linhasVerticais.size()); //seleciona linha aleatória

			if (linhaEscolhida < linhasHorizontais.size()) {
				if (linhasHorizontais[linhaEscolhida].clicarLinhaBot()) {
					escolheu = 1;
				} else {
					escolheu = 0;
				}
			} else if (linhaEscolhida >= linhasHorizontais.size()) {
				linhaEscolhida -= linhasHorizontais.size();
				if (linhasVerticais[linhaEscolhida].clicarLinhaBot()) {
					escolheu = 1;
				} else {
					escolheu = 0;
				}
			}
		} while (!escolheu);
		//cout << tipoLinha << endl;
	}

	bool fecharQuadrado(char quemJogou) { //fecha um quadrado quando as linhas em sua volta s~~ao escolhidas
		int linhasPassadas = 0;
		bool retorno = 0; //retorno da função, Verdadeiro quando quadrado é fechado
		for (int i = 0; i < quadrados.size(); i++) {
			if (eMultiplo(i, 5) && i!=0) {
				linhasPassadas++;
			}

			bool estaFechado = (linhasHorizontais[i].escolhido)
					&& (linhasVerticais[i + linhasPassadas].escolhido)
					&& (linhasHorizontais[i + 5].escolhido
							&& linhasVerticais[i + 1 + linhasPassadas].escolhido); //verifica se linahs ao redor estão escolhidas

			if (estaFechado && !quadrados[i].fechado) {
				if(quemJogou == 'p'){
					quadrados[i].setaCor(0, 0, 255, 200);
					quadrados[i].fechar();
					jogador.adicionaPonto();
				}else if(quemJogou == 'b'){
					quadrados[i].setaCor(255, 0, 0, 200);
					quadrados[i].fechar();
					bot.adicionaPonto();
				}else{
					exit(2);
				}
				retorno=1;
			}
		}
		return retorno;
	}

	void ganhou(){ //verifica se o jogador ganhou ou perdeu
		if(jogador.pontos>bot.pontos){
			cout << "Você Ganhou!!!" << endl;
		}else{
			cout << "Você Perdeu!!!" << endl;
		}
	}

	void fim(){ //verifica se o jogo acabou
		if((jogador.pontos+bot.pontos)==25){
			cout << "Jogo Acabou!!!" << endl;
			ganhou();
			acabou = 1;
		}else{
			acabou = 0;
		}
	}

};

int main() {
	setbuf(stdout, NULL); //zera buffer para que o console sempre abra
	Janela jogo(950, 720); //cria janela do jogo

	jogo.menu(); //inicia o loop do jogo





	return 0;
}
